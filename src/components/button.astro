---
interface Props {
  variant?: 'solid' | 'outline';
  color?: 'cyan' | 'white' | 'gray';
  href?: string;
  class?: string;
  [key: string]: any;
}

const {
  variant = 'solid',
  color = 'gray',
  href,
  class: className = '',
  ...rest
} = Astro.props;

const baseStyles = {
  solid: 'inline-flex justify-center rounded-lg py-2 px-3 text-sm font-semibold transition-colors',
  outline: 'inline-flex justify-center rounded-lg border py-[calc(--spacing(2)-1px)] px-[calc(--spacing(3)-1px)] text-sm transition-colors',
};

const variantStyles = {
  solid: {
    cyan: 'relative overflow-hidden bg-cyan-500 text-white before:absolute before:inset-0 active:before:bg-transparent hover:before:bg-white/10 active:bg-cyan-600 active:text-white/80 before:transition-colors',
    white: 'bg-white text-cyan-900 hover:bg-white/90 active:bg-white/90 active:text-cyan-900/70',
    gray: 'bg-gray-800 text-white hover:bg-gray-900 active:bg-gray-800 active:text-white/80',
  },
  outline: {
    gray: 'border-gray-300 text-gray-700 hover:border-gray-400 active:bg-gray-100 active:text-gray-700/80',
  },
};

const styles = [
  baseStyles[variant],
  variant === 'outline'
    ? variantStyles.outline[color as keyof typeof variantStyles.outline]
    : variantStyles.solid[color as keyof typeof variantStyles.solid],
  className,
].join(' ');
---

{href ? (
  <a href={href} class={styles} {...rest}>
    <slot />
  </a>
) : (
  <button class={styles} {...rest}>
    <slot />
  </button>
)}
