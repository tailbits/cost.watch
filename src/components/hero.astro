---
import Container from './container.astro';
import PhoneFrame from './phone-frame.astro';
import Laptop from './laptop.astro';
import Chart from './landing/chart.astro';

// Generate unique IDs for SVG elements
const backgroundId1 = `gradient-${Math.random().toString(36).substring(2, 9)}`;
const backgroundId2 = `gradient-${Math.random().toString(36).substring(2, 9)}`;

const notifications = [
  { channel: 'Slack', handle: '@CostWatch', description: 'aws.CloudWatch/IncomingBytes exceeded threshold for 2h (expected $0.60, actual $2.69)', time: '11:33' },
  { channel: 'Slack', handle: '@CostWatch', description: 'aws/EC2 instance i-0123456789abc running costs exceeded daily budget ($25.20 vs $10.00)', time: '12:01' },
  { channel: 'Slack', handle: '@CostWatch', description: 'ONGOING: aws.CloudWatch/IncomingBytes exceeded threshold for 8h (expected $4.00, actual $826.69)', time: '12:15' },

]
---

<div class="overflow-hidden py-20 sm:py-32 lg:pb-32 xl:pb-36">
  <Container>
    <div class="lg:grid lg:grid-cols-12 lg:gap-x-8 lg:gap-y-20">
      <div class="relative z-10 mx-auto max-w-2xl lg:col-span-7 lg:max-w-none lg:pt-6 xl:col-span-6">
        <h1 class="text-4xl font-medium tracking-tight text-gray-900">
          Track your AWS spend in real-time. Not 24 hours later!
        </h1>
        <p class="mt-6 text-lg text-gray-600">
          Cost.watch pulls AWS usage metrics from Cloudwatch to project spend, delivering live dashboards and real-time alerts. Don't wait for the billing metrics to catch up and throw off your budgets.
        </p>

        <!-- Quick Start Instructions -->
        <div class="mt-8 rounded-lg py-6 pr-6 bg-gray-50">
          <h3 class="text-sm font-semibold text-gray-900 mb-4">Quick Start</h3>
          <div class="space-y-4">
            <div>
              <p class="text-xs font-medium text-gray-700 mb-2">1. Clone the repository:</p>
              <div class="bg-gray-900 text-gray-100 p-3 rounded text-xs font-mono overflow-x-auto">
                git clone https://github.com/tailbits/costwatch.git
              </div>
            </div>
            <div>
              <p class="text-xs font-medium text-gray-700 mb-2">2. Run with Docker Compose:</p>
              <div class="bg-gray-900 text-gray-100 p-3 rounded text-xs font-mono overflow-x-auto">
                cd costwatch && docker-compose up
              </div>
            </div>
          </div>
        </div>

        <div class="mt-8 flex flex-wrap gap-4">
          <a href="https://github.com/tailbits/costwatch" target="_blank" class="inline-flex items-center justify-center rounded-lg border py-2 px-4 text-sm transition-colors border-gray-300 text-gray-700 hover:border-gray-400 active:bg-gray-100 active:text-gray-700/80">
            <img alt="" src="/images/logos/github.svg" class="w-4 h-4 mr-2" />
            <span>tailbits/costwatch</span>
            <span id="github-stars" class="ml-2 px-2 py-0.5 bg-gray-100 text-gray-700 rounded text-xs font-medium" style="display: none;"></span>
          </a>
        </div>

      </div>
      <div class="relative mt-10 sm:mt-20 lg:col-span-5 lg:row-span-2 lg:mt-0 xl:col-span-6">
        <!-- BackgroundIllustration -->
        <div class="absolute top-4 left-1/2 h-[1026px] w-[1026px] -translate-x-1/3 mask-[linear-gradient(to_bottom,white_20%,transparent_75%)] stroke-gray-300/70 sm:top-16 sm:-translate-x-1/2 lg:-top-16 lg:ml-12 xl:-top-14 xl:ml-0">
          <svg
            viewBox="0 0 1026 1026"
            fill="none"
            aria-hidden="true"
            class="absolute inset-0 h-full w-full animate-spin-slow"
          >
            <path
              d="M1025 513c0 282.77-229.23 512-512 512S1 795.77 1 513 230.23 1 513 1s512 229.23 512 512Z"
              stroke="#D4D4D4"
              stroke-opacity="0.7"
            />
            <path
              d="M513 1025C230.23 1025 1 795.77 1 513"
              stroke={`url(#${backgroundId1})`}
              stroke-linecap="round"
            />
            <defs>
              <linearGradient
                id={backgroundId1}
                x1="1"
                y1="513"
                x2="1"
                y2="1025"
                gradientUnits="userSpaceOnUse"
              >
                <stop stop-color="#06b6d4" />
                <stop offset="1" stop-color="#06b6d4" stop-opacity="0" />
              </linearGradient>
            </defs>
          </svg>
          <svg
            viewBox="0 0 1026 1026"
            fill="none"
            aria-hidden="true"
            class="absolute inset-0 h-full w-full animate-spin-reverse-slower"
          >
            <path
              d="M913 513c0 220.914-179.086 400-400 400S113 733.914 113 513s179.086-400 400-400 400 179.086 400 400Z"
              stroke="#D4D4D4"
              stroke-opacity="0.7"
            />
            <path
              d="M913 513c0 220.914-179.086 400-400 400"
              stroke={`url(#${backgroundId2})`}
              stroke-linecap="round"
            />
            <defs>
              <linearGradient
                id={backgroundId2}
                x1="913"
                y1="513"
                x2="913"
                y2="913"
                gradientUnits="userSpaceOnUse"
              >
                <stop stop-color="#06b6d4" />
                <stop offset="1" stop-color="#06b6d4" stop-opacity="0" />
              </linearGradient>
            </defs>
          </svg>
        </div>

        <!-- dashboard -->
        <div class="hidden xl:block absolute -top-8 left-1/2 w-[1200px] h-[600px] mask-[linear-gradient(to_bottom,white_60%,transparent)] border-16 border-white bg-white/80 shadow-xl rounded-lg">
          <div class="flex flex-col pl-48 w-min gap-4">
            <div class="flex flex-col rounded-lg bg-gray-100 p-4">
              <div class="text-[11px]">Usage</div>
              <div class="text-[9px] text-gray-400">Usage during the last 7 days</div>
              <div class="">
                <Chart class="h-24 w-auto mt-4" />
              </div>
            </div>

            <div class="flex flex-col rounded-lg bg-gray-100 p-4">
              <div class="text-[11px]">Hourly costs</div>
              <div class="text-[9px] text-gray-400">Hourly cost percentiles in the recent days.</div>
              <div class="text-[9px] mt-2 [&_td]:px-2 [&_td:first-child]:pl-0 [&_td:last-child]:pr-0">
                <table class="w-full">
                  <thead>
                  <tr><td>Service</td><td>Metric</td><td>P50</td><td>P90</td><td>PMax</td></tr>
                  </thead>
                  <tbody>
                  <tr><td>CloudWatch</td><td>IncomingBytes</td><td>$0.15</td><td>$0.20</td><td>$0.22</td></tr>
                  </tbody>
                </table>
              </div>
            </div>

            <div class="flex flex-col rounded-lg bg-gray-100 p-4">
              <div class="text-[11px]">Alert Windows</div>
              <div class="text-[9px] text-gray-400">Periods when cost exceeded configured thresholds.</div>
              <div class="text-[9px] mt-2 [&_td]:px-2 [&_td:first-child]:pl-0 [&_td:last-child]:pr-0">
                <table class="w-full">
                  <thead>
                    <tr><td>Service</td><td>Metric</td><td class="text-right">Diff</td></tr>
                  </thead>
                  <tbody>
                  <tr><td>CloudWatch</td><td>IncomingBytes</td><td class="text-red-700 text-right">$0.15 (▲ 50%)</td></tr>
                  <tr><td>EC2</td><td>Instance-14</td><td class="text-red-700 text-right">$25.20 (▲ 250%)</td></tr>
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        </div>
        <div class="-mx-4 h-[448px] mask-[linear-gradient(to_bottom,white_60%,transparent)] px-9 sm:mx-0 lg:absolute lg:-inset-x-10 lg:-top-10 lg:-bottom-20 lg:h-auto lg:px-0 lg:pt-10 xl:-bottom-32">
          <PhoneFrame class="mx-auto max-w-[366px]" priority={true}>
            <!-- Simplified placeholder for AppDemo -->
            <div class="flex flex-col bg-gray-900 h-full">
              <div class="p-4 text-white">
                <div class="text-center pt-8">
                  <div id="phone-time" class="text-6xl font-light opacity-75">19:05</div>
                  <div id="phone-date" class="text-md opacity-60 mt-2">Thursday, July 3</div>
                </div>
              </div>

              <div id="phone-notifications" class="px-2 relative">
                {notifications.map((noti, index) => (
                  <div class="notification flex flex-row p-4 text-white font-normal absolute w-full" style={index > 0 ? "display: none;" : ""}>
                    <img src={`/images/logos/${noti.channel.toLowerCase()}.svg`} class="w-8 h-8" />
                    <div class="flex flex-col ml-4">
                      <div class="font-bold">{noti.channel}<span class="ml-2 opacity-75 text-xs font-normal">now</span></div>
                      <div><strong class="font-bold">{noti.handle}:</strong>{' '}{noti.description}</div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </PhoneFrame>
        </div>
      </div>
    </div>
  </Container>
</div>

<style>
  /* Add any necessary animation styles */
  .animate-spin-slow {
    animation: spin 60s linear infinite;
  }

  .animate-spin-reverse-slower {
    animation: spin-reverse 80s linear infinite;
  }

  @keyframes spin {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(360deg);
    }
  }

  @keyframes spin-reverse {
    from {
      transform: rotate(0deg);
    }
    to {
      transform: rotate(-360deg);
    }
  }

  /* Notification animation styles */
  #phone-notifications {
    min-height: 140px;
    overflow: hidden;
  }

  .notification {
    transition: opacity 0.5s ease, transform 0.5s ease;
    opacity: 0;
    transform: translateY(100%); /* Start from bottom */
    left: 0;
    right: 0;
  }

  .notification.active {
    opacity: 1;
    transform: translateY(0); /* Centered position */
  }

  .notification.slide-out {
    opacity: 0;
    transform: translateY(-20%) scale(0.9);
  }
</style>

<script>
  // Function to animate notifications
  function animateNotifications() {
    const notifications = document.querySelectorAll<HTMLDivElement>('#phone-notifications .notification');
    if (notifications.length === 0) return;

    let currentIndex = 0;

    // Show the first notification initially
    notifications[0].classList.add('active');

    // Function to rotate to the next notification
    function rotateNotifications() {
      // Calculate next index
      const nextIndex = (currentIndex + 1) % notifications.length;

      // Add slide-out class to current notification
      notifications[currentIndex].classList.remove('active');
      notifications[currentIndex].classList.add('slide-out');

      // Show next notification immediately
      notifications[nextIndex].style.display = 'flex';

      // Small delay before adding active class for animation
      setTimeout(() => {
        notifications[nextIndex].classList.add('active');
      }, 50);

      // After animation completes, hide the old notification and update current index
      setTimeout(() => {
        notifications[currentIndex].classList.remove('slide-out');
        notifications[currentIndex].style.display = 'none';
        currentIndex = nextIndex;
      }, 500);
    }

    // Rotate notifications every 5 seconds
    setInterval(rotateNotifications, 5_000);
  }

  // Function to update phone time and date
  function updatePhoneTimeAndDate() {
    const timeElement = document.getElementById('phone-time');
    const dateElement = document.getElementById('phone-date');

    if (!timeElement || !dateElement) return;

    function update() {
      const now = new Date();

      // Update time (HH:MM format)
      const hours = now.getHours().toString().padStart(2, '0');
      const minutes = now.getMinutes().toString().padStart(2, '0');
      timeElement!.textContent = `${hours}:${minutes}`;

      // Update date (Day of week, Month Day format)
      const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
      const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];

      const dayOfWeek = days[now.getDay()];
      const month = months[now.getMonth()];
      const dayOfMonth = now.getDate();

      dateElement!.textContent = `${dayOfWeek}, ${month} ${dayOfMonth}`;
    }

    // Update immediately and then every minute
    update();
    setInterval(update, 60000);
  }

  // Function to fetch GitHub stars
  async function fetchGitHubStars() {
    const starsElement = document.getElementById('github-stars');
    if (!starsElement) return;

    try {
      const response = await fetch('https://api.github.com/repos/tailbits/costwatch');
      if (response.ok) {
        const data = await response.json();
        const stars = data.stargazers_count;

        // Format the star count
        let formattedStars;
        if (stars >= 1000) {
          formattedStars = (stars / 1000).toFixed(1) + 'k';
        } else {
          formattedStars = stars.toString();
        }

        // Use GitHub's star icon with proper color
        starsElement.innerHTML = `
          <svg class="inline-block w-3 h-3 mr-1" style="color: #f59e0b;" fill="currentColor" viewBox="0 0 16 16">
            <path d="M8 .25a.75.75 0 01.673.418l1.882 3.815 4.21.612a.75.75 0 01.416 1.279l-3.046 2.97.719 4.192a.751.751 0 01-1.088.791L8 12.347l-3.766 1.98a.75.75 0 01-1.088-.79l.72-4.194L.818 6.374a.75.75 0 01.416-1.28l4.21-.611L7.327.668A.75.75 0 018 .25z"/>
          </svg>
          ${formattedStars}
        `;
        starsElement.style.display = 'inline-flex';
        starsElement.style.alignItems = 'center';
      }
    } catch (error) {
      // Hide the element if fetch fails
      starsElement.style.display = 'none';
    }
  }

  // Initialize when the DOM is loaded
  document.addEventListener('DOMContentLoaded', () => {
    animateNotifications();
    updatePhoneTimeAndDate();
    fetchGitHubStars();
  });
</script>
